<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HackTM Quals 20 – Find my Pass Writeup</title>
    <url>/2020/04/11/HackTM-Quals-20%E2%80%93Find-my-Pass-Writeup/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Memory dump analysis using Volatility.</li>
<li>Extracting Keepass Master Password from the memory.</li>
<li>Extracting flag from ZIP archive attached in the Keepass database.</li>
</ul>
<a id="more"></a>

<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>I managed to forget my password for my KeePass Database but luckily I had it still open and managed to get a dump of the system’s memory. Can you please help me recover my password?</p>
<p>Challenge file: <a href="https://mega.nz/#!IdUVwY6I!uJWGZ932xab44H4EJ-zVAqu6_UWNJcCVA4_PPXdqCyc" target="_blank" rel="noopener">Mega Drive</a> or <a href="https://drive.google.com/open?id=1hUlGqJZYgbWaEu7w0JnPMqgYdFr8qVJe" target="_blank" rel="noopener">Google Drive</a></p>
<p>Password: <strong>eD99mLkU</strong></p>
<p>Hint: I am not very good with computers, I use my one safe password where I want to keep everything safe from hackers.</p>
<p>I solved this challenge after the CTF has ended.</p>
<p>According to the description, In this challenge, we have to retrieve the Master Password of a Keepass database from the memory.</p>
<h2 id="Initial-Anaysis"><a href="#Initial-Anaysis" class="headerlink" title="Initial Anaysis"></a>Initial Anaysis</h2><p>First, you need to find what OS his system was using. For that, I used imageinfo plugin.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f HackTM.vmem imageinfo</code></pre>
<p><img src="/images/Find-my-Pass/imageinfo.png" alt="Imageinfo Output"></p>
<p>I choose <strong>Win7SP1x86</strong> profile.<br>Let’s check what all processes are running in the system. We can expect that keepass.exe will be present, as the description says that the database was kept open.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f HackTM.vmem --profile<span class="token operator">=</span>Win7SP1x86 pslist</code></pre>
<p><img src="/images/Find-my-Pass/pslist_1.png" alt="pslist output"><br><img src="/images/Find-my-Pass/pslist_2.png" alt="pslist output"></p>
<p>We can see that the keepass.exe process was running and going further.</p>
<h2 id="Extracting-Keepass-database"><a href="#Extracting-Keepass-database" class="headerlink" title="Extracting Keepass database"></a>Extracting Keepass database</h2><p>We need to find the .kdbx file as all KeePass databases are stored with extension .kdbx. For that, we will use filescan plugin and grep for kdbx files.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f HackTM.vmem --profile<span class="token operator">=</span>Win7SP1x86 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">".kdbx"</span></code></pre>
<p><img src="/images/Find-my-Pass/kdbx_filescan.png" alt="Filescan Kdbx"></p>
<p>We can see a database.kdbx was open and the further step is to dump that file to our host system. For that, we will use dumpfiles plugin.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f HackTM.vmem --profile<span class="token operator">=</span>Win7SP1x86 dumpfiles -Q 0x000000007df37c88 -D <span class="token keyword">.</span></code></pre>
<p><img src="/images/Find-my-Pass/kdbx_dumpfiles.png" alt="Dumpfiles kdbx"></p>
<p>When I attempted to open the database, it asked for the master password. The description says that the user has forgotten his password which means we have to recover it.</p>
<h2 id="Retriving-Master-Password"><a href="#Retriving-Master-Password" class="headerlink" title="Retriving Master Password"></a>Retriving Master Password</h2><p>But the hint says user used the same password everywhere ie: he must have copied the password and user it somewhere else. So let’s check what’s there in his clipboard. For that, we use the clipboard plugin.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f HackTM.vmem --profile<span class="token operator">=</span>Win7SP1x86 clipboard</code></pre>
<p><img src="/images/Find-my-Pass/clipboard.png" alt="Clipboard"></p>
<p>We can’t find anything in the clipboard. It seems to be suspicious. So let’s check the verbose data of the clipboard.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f HackTM.vmem --profile<span class="token operator">=</span>Win7SP1x86 clipboard -v</code></pre>
<p><img src="/images/Find-my-Pass/clipboard-v.png" alt="clipboard -v"></p>
<p>Hurrah! We found it.</p>
<p>By removing the dots and using it (<strong>dmVZQmdzOlUrcEBlRj87dHQ3USVBIn</strong>) as the master password we got into the Keepass database.</p>
<p>In the bottom, in attachments, we can see that there is <strong>nothinghere.7z</strong> file that was attached to the password entry.</p>
<p>We can extract that from the <strong>File Attachments</strong> in the <strong>Advanced tab</strong> of <strong>Edit Entry</strong>.</p>
<p>The 7z file asked for a password and on using the database master password we successfully extracted the text file. It contained the flag.</p>
<p>Flag: <strong>HackTM{d14c02244b17f4f9dfc0f71ce7ab10e276a5880a05fca64d39a716bab92cda90}</strong></p>
<p>The another way of solving this challenge is mentioned in <a href="https://blog.bi0s.in/2020/02/09/Forensics/HackTM-FindMyPass/" target="_blank" rel="noopener">blog.bi0s.in</a> by my mentor <a href="https://twitter.com/_abhiramkumar" target="_blank" rel="noopener">@_abhiramkumar</a>.</p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Memory Forensics</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Fresh From The Oven - InCTF Internationals 2019 Writeup</title>
    <url>/2019/10/03/InCTFi19-Fresh-From-the-Oven/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Decoding the strings found in TCP stream 0.</li>
<li>Analysing and extracting data sent via different ports of TCP.</li>
<li>Using character-wise caesar from the extracted data.</li>
<li>Zip cracking</li>
</ul>
<a id="more"></a>

<h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><p><img src="/images/FreshFromtheOven/description.png" alt="Description"></p>
<p>You can download the challenge file from <a href="https://mega.nz/#!d6wEFICJ!u9XykRdIoJtloYDZQxFqXt1KvWR5aK3Ucisd2-a-qms" target="_blank" rel="noopener"><strong>Mega</strong></a> or <a href="https://drive.google.com/file/d/1ZBLNYqFOA0dOx8e1GnNoO3qn2V0Elpcm/view?usp=sharing" target="_blank" rel="noopener"><strong>G-Drive</strong></a></p>
<p>This is a challenge which I made for InCTFi’19 along with my teammate(<a href="https://twitter.com/__Sh4d0w__" target="_blank" rel="noopener">@Sh4d0w</a>).</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>We are provided with a <strong>pcap</strong> file. Let’s start our initial analysis.</p>
<p>We can see so many TCP packets in the capture file and the description says that it was a chat between two friends. So let’s follow the TCP stream and see if anything is interesting in it.</p>
<p><img src="/images/FreshFromtheOven/tcp-stream-0.png" alt="TCP Stream"></p>
<p>We do see a chat between 2 people. Also, we can find some encoded strings. The secret code: <strong>Remember remember the FIFTH of november :)</strong> does hint out something. We can assume the encoded strings are <strong>ROT5</strong>. Decoding them, we get;</p>
<pre><code>Rohith: This is a sample in that encoded way.

Shyam: Oh, It&#39;s good and it took a lot of time to understand for me.

Rohith: Sending you some interesting files, try to find the secret behind them and keep it confidential

Shyam: Okay, sure:)</code></pre><h2 id="Further-Analysis"><a href="#Further-Analysis" class="headerlink" title="Further Analysis"></a>Further Analysis</h2><p>As the chat between them says that some files have transferred. And we can see that from <strong>TCP Stream 2</strong>, extra data with <strong>800 bytes</strong> is transferred in two different destination ports(<strong>444</strong> &amp; <strong>81</strong>). We can assume that the two files have been transferred.</p>
<p>Extracting the data sent to the above-mentioned ports and applying <strong>Caesar cipher</strong> on the two files, we get the file structure of a <strong>PDF file</strong> and a <strong>ZIP file</strong>.</p>
<p><img src="/images/FreshFromtheOven/file_pdf.png" alt="File PDF"></p>
<p><img src="/images/FreshFromtheOven/file_zip.png" alt="File zip"></p>
<p>After opening the PDF and we find extra spaces in the last page of that file. It says “<strong>NOTHING HERE :( DON’T WASTE YOUR TIME</strong>“.</p>
<p>So it’s just a <strong>rabbit hole</strong>.</p>
<p>After a brief observation, we see that the ZIP is password protected. So, we use <strong>fcrackzip</strong> in dictionary mode to crack the password,</p>
<p><img src="/images/FreshFromtheOven/zip_cracking.png" alt="zip cracking"></p>
<p>The password is <strong>johnjandroveclarkmichaelkent</strong>.</p>
<p>Extracting the file from the zip gave a <strong>PNG</strong> image.</p>
<p><img src="/images/FreshFromtheOven/flag.png" alt="flag"></p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>Simple LSB steg can be used to get the flag. We used the popular tool <strong>zsteg</strong> for this.</p>
<p>FLAG: <strong>inctf{3ach_4nd_3v3ry_s3cre7_inf0rm4t10n_w1ll_b3_kn0wn_by_wir3shark!!!!!_:)}</strong></p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>Steganography</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackcon CTF’19 – Too cold for steg Writeup</title>
    <url>/2019/08/24/Hackcon-CTF%E2%80%9919-%E2%80%93-Too-cold-for-steg-Writeup/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Whitespace steganography</li>
</ul>
<a id="more"></a>

<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><img src="/images/Toocoldforsteg/description.png" alt="Description"></p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>Got a text file and opening the text file in any text editor and selecting all the text we can find some whitespace present at the ending of the each each line.</p>
<p>As the title is Too cold to steg we will get a tool known as stegsnow in our mind.</p>
<p>But for using the stegsnow we need a password. After searching for the password in the file given we can get the password as <strong>d4rkc0de-IIITD</strong>.</p>
<p><img src="/images/Toocoldforsteg/grep_password.png" alt="grep password"></p>
<p>Then using the stegsnow we will get the flag.</p>
<p><img src="/images/Toocoldforsteg/stegsnow.png" alt="stegsnow command"></p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>Flag: <strong>d4rk{h@ving_fun_w1th_st3gsn0w?}c0de</strong></p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Steganography</category>
      </categories>
      <tags>
        <tag>whitespace</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackcon CTF’19 – GIMP IT Writeup</title>
    <url>/2019/08/24/Hackcon-CTF%E2%80%9919-%E2%80%93-GIMP-IT-Writeup/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Analysing layers for an image</li>
<li>PIL</li>
</ul>
<a id="more"></a>

<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><img src="/images/gimpit/description.png" alt="description"></p>
<p>As the challenge name suggests, use GIMP we will proceed with it. After opening the image in GIMP, we can see another layer in the image. So on choosing/making that layer visible we can see the content in that layer.</p>
<p><img src="/images/gimpit/layer_2_gimp.png" alt="layer 2"></p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>We can see the “Nothing here” layer present in the image but we cannot understand the contents in it. These type of files also gives an additional advantage that the contents present in them are visible in original file data in form hex or in normal text. So after using strings we can see that there is a hex data present in it.</p>
<p><img src="/images/gimpit/strings_output.png" alt="strings output"></p>
<h2 id="Further-Analysis"><a href="#Further-Analysis" class="headerlink" title="Further Analysis"></a>Further Analysis</h2><p>The hex data is a zip file, so copying that data and making a file out it, we got an another file present in it. And that file contains of only 1’s and 0’s. First thought that it would an esolang(spoon) but didn’t anything. So there are somany 1’s and 0’s we thought of making an image from it. But we need the size of the image. And the len(whole binary string) is exactly the square of 370, we will use it as the image height &amp; width. Assuming 0 = (255, 255, 255) and 1 = (0, 0, 0).</p>
<p>So performed the operation in ipython and got an QR code. Here is the code;</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        t<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        t<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">370</span><span class="token punctuation">,</span><span class="token number">370</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
im<span class="token punctuation">.</span>putdata<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.png'</span><span class="token punctuation">)</span></code></pre>
<p>On running the above code in python got a QR code and after scanning it got the flag.</p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>Flag: <strong>d4rk{L0t5_0f_th1ng5_t0_d0_1n_th15_chAll@ng3}c0de</strong></p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Steganography</category>
      </categories>
      <tags>
        <tag>Steganography</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Memlabs Lab - 1 writeup</title>
    <url>/2020/06/01/Memlabs-Lab-1-writeup/</url>
    <content><![CDATA[<p>MemLabs is an educational, introductory set of CTF-styled challenges which is aimed to encourage students, security researchers and also CTF players to get started with the field of Memory Forensics.</p>
<a id="more"></a>

<p>The labs given by <a href="https://twitter.com/_abhiramkumar/" target="_blank" rel="noopener">@_abhiramkumar</a> are really useful for the beginners to start with Memory Forensics.</p>
<p>The memory files and Descriptions are available in his <a href="https://github.com/stuxnet999/MemLabs" target="_blank" rel="noopener">github repo</a>.<br>If you are having any troubles in the commands used, you can refer <a href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference" target="_blank" rel="noopener">volatility command referance</a>.</p>
<h2 id="Lab-1-Writeup"><a href="#Lab-1-Writeup" class="headerlink" title="Lab - 1 Writeup"></a>Lab - 1 Writeup</h2><p>We are provided with the windows 7 memory dump. To know which OS’s memory dump we have, we can use imageinfo plugin to find the profile. Let’s begin with the initial level of analysis.</p>
<pre class=" language-bash"><code class="language-bash">$ Volatility -f MemoryDump_Lab1.raw imageinfo</code></pre>
<p><img src="/images/Memlabs-Lab-1/imageinfo.png" alt="imageinfo output"></p>
<p>As we got the profile, we can use it and get the processes running in at the time for memory capture.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab1.raw --profile<span class="token operator">=</span>Win7SP1x64 pslist</code></pre>
<p><img src="/images/Memlabs-Lab-1/pslist_1.png" alt="pslist output"><br><img src="/images/Memlabs-Lab-1/pslist_2.png" alt="pslist output"></p>
<p>As we see above cmd, mspaint and WinRAR are the active running processes.</p>
<h3 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag - 1"></a>Flag - 1</h3><p>So let us see what is there in cmd.exe.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab1.raw --profile<span class="token operator">=</span>Win7SP1x64 consoles</code></pre>
<p><img src="/images/Memlabs-Lab-1/consoles.png" alt="consoles output"><br>You can see a base64 string. After decoding base64, we got the first flag: <strong>flag{th1s_1s_th3_1st_st4g3!!}</strong></p>
<h3 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag - 2"></a>Flag - 2</h3><p>As mspaint is also an active running process, Let us check it out.<br>To find what is running in mspaint, first we need to take dump the mspaint.exe (PID 2424) as shown below.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab1.raw --profile<span class="token operator">=</span>Win7SP1x64 memdump -p 2424 -D dump</code></pre>
<p><img src="/images/Memlabs-Lab-1/memdump_mspaint.png" alt="Memdump MSPaint"><br>Next, we need to change the extension of <strong>2424.dmp</strong> to <strong>2424.data</strong>. And we need to open 2424.data using <strong>GIMP(GNU Image Manipulation Program)</strong>.<br>After opening the image using GIMP, this is what we got,</p>
<p><img src="/images/Memlabs-Lab-1/load_gimp.png" alt="load in gimp"></p>
<p>After changing the values of width and height using up and down arrows, We will somehing similar to this.</p>
<p><img src="/images/Memlabs-Lab-1/gimp_flag.png" alt="mogify height and width"></p>
<p>After modifying the image to understandable side, we will get something similar to this,</p>
<p><img src="/images/Memlabs-Lab-1/gimp_flag_1.png" alt="flag - 2"></p>
<p>Here you get the second flag.<br>Flag: <strong>flag{G00d_BoY_good_girL}</strong></p>
<h3 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag - 3"></a>Flag - 3</h3><p>As WinRAR is also running that means some sort of archive has been opened. So let us check for an archive in the given memory dump.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab1.raw --profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span> <span class="token function">grep</span> Documents</code></pre>
<p><img src="/images/Memlabs-Lab-1/rar_filescan.png" alt="Documents filescan output"></p>
<p>Here, we can see a file Important.rar in Documents Folder. So we will dump it and check it.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab1.raw --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000003fa3ebc0 -D dump</code></pre>
<p><img src="/images/Memlabs-Lab-1/rar_dumpfiles.png" alt="Dumpfiles Important.rar"></p>
<p>However, the archive is password protected. Also, brute-forcing for the password is not at all intended. So let us use unrar command and check what we get.</p>
<p><img src="/images/Memlabs-Lab-1/unrar.png" alt="unrar output"></p>
<p>It’s written that, “<strong>Password is NTLM hash(in uppercase) of Alissa’s account passwd</strong>”.<br>We can get Alissa’s account NTLM hash from hashdump.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab1.raw --profile<span class="token operator">=</span>Win7SP1x64 hashdump</code></pre>
<p><img src="/images/Memlabs-Lab-1/hashdump.png" alt="hashdump output"></p>
<p>So using the Alissa Simpson’s hash (<strong>f4ff64c8baac57d22f22edc681055ba6</strong>) in upper case and entering it as the password for RAR, we get the flag.</p>
<p>So finally we get the third flag.</p>
<p><img src="/images/Memlabs-Lab-1/flag3.png" alt="flag - 3"></p>
<p>That’s how you finish this <strong>MemLabs, Lab – 1</strong>.</p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Memlabs</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
        <tag>Memlabs</tag>
      </tags>
  </entry>
  <entry>
    <title>Memlabs Lab - 5 writeup</title>
    <url>/2020/06/01/Memlabs-Lab-5-writeup/</url>
    <content><![CDATA[<p>We are provided with a <strong>Windows 7</strong> memory dump. Let us begin our initial level of analysis.</p>
<p>Let’s start with the running processes.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab5.raw --profile<span class="token operator">=</span>Win7SP1x64 pslist</code></pre>
<p><img src="/images/Memlabs-Lab-5/pslist1.png" alt="pslist output"><br><img src="/images/Memlabs-Lab-5/pslist2.png" alt="pslist output"></p>
<p>As we can <code>WinRAR.exe</code> is running, that imply that the user might opened a RAR archive. So lets check for a RAR file in the whole memory.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab5.raw --profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">rar</span></code></pre>
<p><img src="/images/Memlabs-Lab-5/filescan_rar.png" alt="Rar"></p>
<p>As we can see that there is a rar archive present in the memory. So lets dump it and check it.</p>
<p><img src="/images/Memlabs-Lab-5/dump_rar.png" alt="dumpfiles"></p>
<p>We have dumped the rar. Let us check extracting it and check the contents present in it.</p>
<p><img src="/images/Memlabs-Lab-5/unrar1.png" alt="extract rar"><br>As we can see that, it is asking for the password. And the description says that <code>You&#39;ll get the stage 2 flag only when you have the stage 1 flag</code>. So let us find the first flag.</p>
<h2 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h2><p>As we seen the pslist output, we can’t find any suspicious process running. So lets check the explorer history. For this we will use <code>iehistory</code> plugin.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab5.raw --profile<span class="token operator">=</span>Win7SP1x64 iehistory</code></pre>
<p><img src="/images/Memlabs-Lab-5/iehistory.png" alt="iehistory"></p>
<p>We can see a bmp file being accessed. And file name seem to be suspicious and its a base64 string. So lets decode it.</p>
<p>After decoding it we got the flag: <strong>flag{!!<em>w3LL_d0n3_St4g3-1_0f_L4B_5_D0n3</em>!!}</strong></p>
<h2 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h2><p>So let’s use the flag that we got as the password for the rar archive.</p>
<p><img src="/images/Memlabs-Lab-5/unrar2.png" alt="Unrar using stage 1 password"></p>
<p>Hoorah! We got it extracted.</p>
<p><img src="/images/Memlabs-Lab-5/Stage2.png" alt="Flag"></p>
<p>That’s how you finish this <strong>MemLabs, Lab – 5</strong>.</p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Memlabs</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
        <tag>Memlabs</tag>
      </tags>
  </entry>
  <entry>
    <title>Securinets CTF’19 – Rare to win Writeup</title>
    <url>/2019/08/17/Securinets-CTF%E2%80%9919-%E2%80%93-Rare-to-win-Challenge/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Chrome history analysis</li>
<li>ACE file analysis</li>
<li>Detecting the virus</li>
</ul>
<a id="more"></a>

<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><img src="/images/Raretowin/description.png" alt="Description"></p>
<p>I could not solve this challenge at the time of the CTF. But it is a nice challenge.</p>
<p>Given with an Windows 7 memory dump, lets see what all processes are running in the machine/system.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>As the description of the says that the operator was browsing web the he might be using one of the browsers like Chrome, Firefox, or inbuilt Explorer. So lets go and see the pslist.</p>
<p><img src="/images/Raretowin/pslist.png" alt="PSlist output"></p>
<p>As we can see that chrome was running in system at the time when the dump was captured. So as the Chrome was running in the system we can use chrome history plugin and get the users history data.</p>
<p><img src="/images/Raretowin/chromehistory.png" alt="Chrome History"></p>
<h2 id="Further-Analysis"><a href="#Further-Analysis" class="headerlink" title="Further Analysis"></a>Further Analysis</h2><p>As we can see that, there is file called <strong>music.rar</strong> was downloaded from the chrome. So we will search for the file in the dump, using filescan plugin.</p>
<p><img src="/images/Raretowin/filescan_music_rar.png" alt="filescan_music_rar"></p>
<p>It resulted that there is no file relating to it. So I have downloaded the file from the <a href="https://www.mediafire.com/file/2t7bb2mflg2lwwj/music.rar/file" target="_blank" rel="noopener">link</a> he browsed.</p>
<p>I tried opening the rar but it does not shown any files and it was in <strong>Read Only</strong> mode. So tried running <strong>file command</strong> on it and got to know that it is an <strong>ACE</strong> file.</p>
<p><img src="/images/Raretowin/file_music.png" alt="file command"></p>
<p>After a quick search in google, i came to know that there are some tools to open and extract the file from the ace file. So I renamed it and tried the unace command line tool which was provided by the Ubuntu software. But it doesn’t gave any results. So I checked for other alternatives and found <a href="http://webdiis.unizar.es/pub/unix/archive/linunace25.tgz" target="_blank" rel="noopener">this</a>.</p>
<p>After using that tool, I can see that there is a firefox.exe and it is unable to override the build in firefox of the host system as I didn’t run with sudo permission.</p>
<p><img src="/images/Raretowin/unace.png" alt="unace"></p>
<p>And also if we use binwalk on the that ace file, we can see an <strong>ELF</strong> file present in it. And loading that in gdb and seeing the main function of the elf, there is only one operation going on that is the <strong>printf function</strong>. So we can say that the exe was the <strong>virus</strong> that the challenge author has asked.</p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>But the flag is the <strong>path_to_the_virus</strong>. So as we can see that the exe file was extracting to <strong>C:/Users/Public/Data/firefox.exe</strong> therefore that will be the path that they have asked.</p>
<p>But in windows the folders are divided using “\\” so the resulting path is <strong>C:\\Users\\Public\\Data\\firefox.exe</strong>.</p>
<p>And the flag will be,</p>
<p>Flag : <strong>securinets{84117b4eb400242a9db464e84220e672}</strong></p>
<p>If you liked my solution, please do share it. I’m available on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Memory Forensics</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Memlabs Lab - 4 writeup</title>
    <url>/2020/06/01/Memlabs-Lab-4-writeup/</url>
    <content><![CDATA[<p>We are provided with a <strong>Windows 7</strong> memory dump. Let’s begin our initial analysis.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab4.raw --profile<span class="token operator">=</span>Win7SP1x64 pslist</code></pre>
<p><img src="/images/Memlabs-Lab-4/pslist1.png" alt="pslist"><br><img src="/images/Memlabs-Lab-4/pslist2.png" alt="pslist"></p>
<p>There is nothing quite interesting in the <strong>pslist</strong> output except for the <strong>Sticky Note</strong> process. Hmm, perhaps there is something written in it.</p>
<p>Just to keep it short, there was nothing important written in the clipboard. It was a small rabbit hole.</p>
<p>Now let us proceed to the files present in the system.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab4.raw --profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span> <span class="token function">grep</span> Desktop</code></pre>
<p><img src="/images/Memlabs-Lab-4/filescan1.png" alt="filescan"><br><img src="/images/Memlabs-Lab-4/filescan2.png" alt="filescan"></p>
<p>There are interesting files present on the desktop. The files <code>Important.txt</code>, <code>galf.jpeg</code> &amp; <code>Screenshot1.png</code> are of special interest. Let us try to dump them :)</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab4.raw --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000003e8ad250 -D dump</code></pre>
<p>Now we have dumped the file <strong>galf.jpeg</strong>. However, doing basic steg techniques on the file yield nothing. So it is useless.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab4.raw --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000003e8d19e0 -D dump</code></pre>
<p>Now we have dumped the file <strong>Screenshot1.png</strong>. However on doing basic steg techniques on the file yield nothing. so it is useless.</p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>One important thing in this lab and also the main exploit is to get the data present in the file <strong>Important.txt</strong>. However, dumpfiles will not be able to dump the required file as it has been deleted. However, its contents are still present in memory. If you fundamentally understand the Master File Table(MFT), you would know that we can access the data as long as the data blocks are overwritten.</p>
<p>For this, we take the help of the <strong>mftparser</strong> plugin.</p>
<pre><code>$ volatility -f MemoryDump_Lab4.raw --profile=Win7SP1x64 mftparser &gt; mft.txt</code></pre><p>So let us search for the data blocks of the file <strong>Important.txt</strong></p>
<p><img src="/images/Memlabs-Lab-4/mft.png" alt="mft"></p>
<p>Aha! Now we see the characters of the flag separated by irregular number of spaces.</p>
<p>So, combining them we got the flag: <strong>inctf{1_is_n0t_EQu4l_7o_2_bUt_th1s_d0s3nt_m4ke_s3ns3}</strong>.</p>
<p>That’s how you finish this <strong>MemLabs, Lab – 4</strong>.</p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Memlabs</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
        <tag>Memlabs</tag>
      </tags>
  </entry>
  <entry>
    <title>Memlabs Lab - 6 writeup</title>
    <url>/2020/06/01/Memlabs-Lab-6-writeup/</url>
    <content><![CDATA[<p>We are provided with a <strong>Windows 7</strong> memory dump. Let us begin our initial level of analysis.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><pre><code>$ volatility -f MemoryDump_Lab6.raw --profile=Win7SP1x64 pslist</code></pre><p><img src="/images/Memlabs-Lab-6/pslist1.png" alt="pslist"><br><img src="/images/Memlabs-Lab-6/pslist2.png" alt="pslist"></p>
<p>As we see from the process list, <code>cmd.exe</code>, <code>chrome.exe</code>, <code>firefox.exe</code> and <code>WinRAR.exe</code> as active running processes.</p>
<h2 id="First-part"><a href="#First-part" class="headerlink" title="First part"></a>First part</h2><p>Let us check the chrome’s history.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugins<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab6.raw --profile<span class="token operator">=</span>Win7SP1x64 chromehistory</code></pre>
<p><img src="/images/Memlabs-Lab-6/pastebin1.png" alt="chromehistory"></p>
<p>This seem to be an interesting <a href="https://pastebin.com/RSGSi1hk" target="_blank" rel="noopener">pastebin</a> link.</p>
<p><img src="/images/Memlabs-Lab-6/pastebin2.png" alt="PasteBin"></p>
<p>The Pastebin link contains another Google Docs link, lets head there. The docs link is: <a href="https://www.google.com/url?q=https://docs.google.com/document/d/1lptcksPt1l_w7Y29V4o6vkEnHToAPqiCkgNNZfS9rCk/edit?usp%3Dsharing&sa=D&source=hangouts&ust=1566208765722000&usg=AFQjCNHXd6Ck6F22MNQEsxdZo21JayPKug" target="_blank" rel="noopener">click here</a></p>
<p><img src="/images/Memlabs-Lab-6/mega_link.png" alt="Google-Doc"></p>
<p>The doc contains a lot of spam but there is one interesting link which leads us to a mega drive: <strong><a href="https://mega.nz/#!SrxQxYTQ" target="_blank" rel="noopener">https://mega.nz/#!SrxQxYTQ</a></strong>.</p>
<p>However, to download the file present in the mega drive, we need to find the KEY. However, the text in the Pastebin link tells us that “David sent the key in mail”.</p>
<p>Okay, let me use the <code>Screenshot</code> plugin, it might help us.</p>
<pre><code>$ volatility --plugins=/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab6.raw --profile=Win7SP1x64 screenshot -D .</code></pre><p><img src="/images/Memlabs-Lab-6/screenshot.png" alt="Screenshot"></p>
<p>We can see that firefox window is open with the Gmail and has a subject <strong>Mega Drive Key</strong>. Now its time for some raw analysis. As the browser data is stored in JSON files. So we might get the message attached to that subject from raw analysis.</p>
<p>So we can use the <code>strings</code> command, as we can get the data stored in JSON file from the memory.</p>
<pre class=" language-bash"><code class="language-bash">$ strings MemoryDump_Lab6.raw <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Mega Drive Key"</span></code></pre>
<p><img src="/images/Memlabs-Lab-6/mega_key.png" alt="strings"></p>
<p>So the key is <strong>zyWxCjCYYSEMA-hZe552qWVXiPwa5TecODbjnsscMIU</strong>.</p>
<p>So we find a PNG image in the Mega drive. However, PNG is corrupted. Fixing the IHDR of the image gives us the 1st part of the flag.</p>
<p><img src="/images/Memlabs-Lab-6/flag1.png" alt="flag 1stpart"></p>
<p>The first part is: <strong>inctf{thi5_cH4LL3Ng3_!s_g0nn4_b3_?_</strong></p>
<h2 id="Second-part"><a href="#Second-part" class="headerlink" title="Second part"></a>Second part</h2><p>As WinRAR is running, that imply that user opened a rar archive, So we will search for a <code>rar archive</code> in the memory.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugins<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab6.raw --profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">rar</span></code></pre>
<p>we see a folder named <strong>pr0t3ct3d</strong> and which contains a RAR archive with the name <strong>flag.rar</strong></p>
<p><img src="/images/Memlabs-Lab-6/filescan_rar.png" alt="filescan"></p>
<p>Let us dump the RAR archive with the help of the dumpfiles plugin.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugins<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab6.raw --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000005fcfc4b0 -D <span class="token keyword">.</span></code></pre>
<p><img src="/images/Memlabs-Lab-6/dump_rar.png" alt="Dump Rar"></p>
<p>However, the archive is password protected. Also, brute-forcing for the password might not help us. So lets check the other running processes.</p>
<p>As <code>cmd.exe</code> is running, Using the <code>cmdscan</code> plugin, we see that <code>env</code> command has been used. So let us look at the Environment variables.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugins<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab6.raw --profile<span class="token operator">=</span>Win7SP1x64 cmdscan</code></pre>
<p><img src="/images/Memlabs-Lab-6/cmdscan.png" alt="cmdscan"></p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugins<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab6.raw --profile<span class="token operator">=</span>Win7SP1x64 envars</code></pre>
<p>We observe a custom variable created named <strong>RAR password</strong>.</p>
<p><img src="/images/Memlabs-Lab-6/envars.png" alt="envars"></p>
<p>So it gives out the password as <strong>easypeasyvirus</strong>. Now we get the last part of the flag.</p>
<p><img src="/images/Memlabs-Lab-6/flag2.png" alt="flag2"></p>
<p>So now let us concatenate the 2 parts to finish this lab.</p>
<p>FLAG: <strong>inctf{thi5_cH4LL3Ng3_!s_g0nn4_b3_?<em>aN_Am4zINg</em>!<em>i</em>gU3Ss???_}</strong></p>
<p><strong>Note:</strong> Due to some markdown issue, ‘_’ is not being displayed properly, so check it out.</p>
<p>That’s how you finish this <strong>MemLabs, Lab – 6</strong>.</p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Memlabs</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
        <tag>Memlabs</tag>
      </tags>
  </entry>
  <entry>
    <title>Swamp CTF’18 – Orcish Writeup</title>
    <url>/2019/08/11/Swamp-CTF%E2%80%9918-%E2%80%93-Orcish-challenge/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Analysing ICMP type field and extracting GIF file</li>
</ul>
<a id="more"></a>

<h2 id="Descritpion"><a href="#Descritpion" class="headerlink" title="Descritpion"></a>Descritpion</h2><p><img src="/images/orcish/description.png" alt="Description"></p>
<p>This is a good challenge and very useful challenge for learning about Networking and it’s related concepts.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>In this challenge on opening the pcap file and checking the protocol hierarchy, we can see so many protocols are present in it.</p>
<p><img src="/images/orcish/protocol_hiercy.png" alt="Protocol Hierarchy"></p>
<p>As usually, as there are so many HTTP and TCP packets in that, so using the Export objects we can extract the HTTP data from the packets. But could not find anything interesting from that. As we know that the same HTTP data is transferred via TCP also no need of extracting the TCP data from the TCP packets. I have wasted a lot of time in analysing those data and those packets.</p>
<p>After going into ICMP packets, we can see the <strong>GIF file signature(GIF89a)</strong>, splitted through upcoming packets. So we can assume that a <strong>GIF file</strong> is transferred in ICMP packets.</p>
<p><img src="/images/orcish/gif_1.png" alt="first byte"> <img src="/images/orcish/gif_2.png" alt="second byte"> <img src="/images/orcish/gif_3.png" alt="third byte"> <img src="/images/orcish/gif_4.png" alt="forth byte"> <img src="/images/orcish/gif_5.png" alt="fifth byte"> <img src="/images/orcish/gif_6.png" alt="sixth byte"></p>
<h2 id="Further-Analysis"><a href="#Further-Analysis" class="headerlink" title="Further Analysis"></a>Further Analysis</h2><p>So, we know that scapy a powerful packet manipulation program. Extracting the specified packets(ICMP) and reading the packet through scapy, we can see that, type layer of the ICMP packets was transferring the data.</p>
<p><img src="/images/orcish/display_scapy.png" alt="Load Scapy"></p>
<p>So, I have written an exploit script, to get the whole required data <strong>(ICMP type)</strong> from the ICMP packets. You need to export all the ICMP packets and save it as <strong>exported.pcap</strong>, and run the script below.</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span>
f<span class="token operator">=</span>rdpcap<span class="token punctuation">(</span><span class="token string">'exported.pcap'</span><span class="token punctuation">)</span>
x<span class="token operator">=</span><span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x<span class="token operator">+=</span>chr<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>ICMP<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span>

b<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'flag.gif'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
b<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>After running the above code it will create a new file named <strong>flag.gif</strong> and after opening it we got the flag.</p>
<p><img src="/images/orcish/flag.gif" alt="Flag"></p>
<p>If you liked my solution, please do share it. I’m available on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>Python</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Securinets-CTF’20–Time-Matters</title>
    <url>/2020/05/26/Securinets-CTF%E2%80%9920%E2%80%93Time-Matters/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>chrome history analysis</li>
<li>File recovery from memory dump</li>
<li>Simple stego</li>
</ul>
<a id="more"></a>

<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><img src="/images/TimeMatters/description.png" alt="Description"></p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>We are given with a Windows 7 memory dump. Let’s see what all processes are running in the macine.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f for1.raw --profile<span class="token operator">=</span>Win7SP1x86_23418 pslist</code></pre>
<p><img src="/images/TimeMatters/pslist.png" alt="PSList"></p>
<p>We can see Explorer and chrome are in open, lets check what’s there in Chrome’s history. We know that for their is a plugin <strong>chromehistory</strong>, we will use that.</p>
<pre class=" language-bash"><code class="language-bash">volatility --plugins<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f for1.raw --profile<span class="token operator">=</span>Win7SP1x86_23418 chromehistory</code></pre>
<p><img src="/images/TimeMatters/chromehistory.png" alt="chrome history"></p>
<p>We didn’t find any suspicious links in chrome’s history. </p>
<h2 id="Further-Analysis"><a href="#Further-Analysis" class="headerlink" title="Further Analysis"></a>Further Analysis</h2><p>So let’s check what all files are there in the system.</p>
<pre class=" language-bash"><code class="language-bash">volatility --plugins<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f for1.raw --profile<span class="token operator">=</span>Win7SP1x86_23418 filescan <span class="token operator">|</span> <span class="token function">grep</span> Desktop</code></pre>
<p><img src="/images/TimeMatters/filescan_desktop.png" alt="Filescan Desktop"></p>
<p>We can steghide and a jpg image on the desktop, So let’s dumpfile the jpg file and use steghide on it.</p>
<p><img src="/images/TimeMatters/dumpfiles.png" alt="dumpfiles"></p>
<p>When I used steghide for extaction, it asked for the password, I followed the same way as everyone does, just leaving it <strong>blink</strong> and clicking <strong>Enter</strong>. But no use.</p>
<p><img src="/images/TimeMatters/steghide_wop.png" alt="Steghide Without PSSWD"></p>
<p>So I thought to use the users password and got the NTLM hash using hashdump, but when cracked hash didn’t gave the result.</p>
<p><img src="/images/TimeMatters/hashdump.png" alt="hashdump"> <img src="/images/TimeMatters/crackstation.png" alt="crackstation"></p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>So after opening the image, it’s Messi’s image which was took on 2019. So the on looking at the challenge titile and relating that to the password of steghide, we can use <strong>Messi2019</strong> as password and try what we can get.</p>
<p><img src="/images/TimeMatters/DS0394.jpg" alt="Messi Image"><br><img src="/images/TimeMatters/steghide_2.png" alt="Using Messi2019 as Password"></p>
<p>Hoorah!! We got the output. One opening the resulted image, we got the flag.</p>
<p><img src="/images/TimeMatters/image.png" alt="Flag"></p>
<p>There is an other way also, by using <strong>mimikatz</strong> for getting the user password. But when I used the password that we got in <strong>mimikatz</strong>, I didn’t got anything, so after modifing the password by relating to the challenge title and modifying it to <strong>Messi2020</strong>, we can get the flag.</p>
<p><img src="/images/TimeMatters/mimikatz.png" alt="mimikatz"><br><img src="/images/TimeMatters/steghide_1.png" alt="using Messi2020 as password"></p>
<p>If you liked my solution, please do share it. I’m available on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Memory Forensics</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Swamp CTF’19 - The Cyber War Continues Writeup</title>
    <url>/2019/04/09/Swamp-CTF%E2%80%9919-The-Cyber-War-Continues/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>USB leftover Capture data extraction.</li>
</ul>
<a id="more"></a>

<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote>
<p>As you and your convoy circle the barren lands on your light cycles you notice something strange in the distance. Upon further investigation you find what seems to be the remnants of a battle.</p>
<p>Bodies, robotic and organic alike, are strewn all over the place. You begin scavenging for supplies and weapons, suddenly a man near death thrusts his hand and grabs your arm. “Please” he croaks, “find my friends”.</p>
<p>He hands you a USB as he takes his last breath. You plug the drive into your mechanical arm and the contents start flooding your HUD. It contains this message and an encrypted file.</p>
</blockquote>
<p>Click <a href="https://drive.google.com/drive/u/0/folders/1dTzkvMUmiqKmtkBgyFevXob9WOXsCZQA" target="_blank" rel="noopener">here</a>, to download challenge file.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>In this challenge we got a 7z file which was password protected and a text file. I don’t know why they have given that text file, as of now my aim was to crack the password for the ‘7z file’.</p>
<p><img src="/images/cyberwar/7z.png" alt="Protected 7z"></p>
<p>So, I used an <a href="https://www.lostmypass.com/file-types/7z/" target="_blank" rel="noopener">online tool</a> to crack the 7z password. And it gave me the password as “toor”, using this as the password for the archive and extracting it, got a pcap.</p>
<p><img src="/images/cyberwar/pcap.png" alt="Display pcap"></p>
<p>On analysing that pcap file, all the packets present in that pcap file are related to USB Protocol and on observing the left over capture data got to know that it was based on the keyboard Strokes.</p>
<h2 id="Futher-Analysis"><a href="#Futher-Analysis" class="headerlink" title="Futher Analysis"></a>Futher Analysis</h2><p>So, on googling found a <a href="https://bitvijays.github.io/LFC-Forensics.html" target="_blank" rel="noopener">script</a> for USB Keyboard Strokes and i have rewritten that code such that it will automate all the process we do manually and will give the flag out. The code follows,</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
usb_codes <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token number">0x04</span><span class="token punctuation">:</span><span class="token string">"aA"</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">:</span><span class="token string">"bB"</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">:</span><span class="token string">"cC"</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">:</span><span class="token string">"dD"</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">:</span><span class="token string">"eE"</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">:</span><span class="token string">"fF"</span><span class="token punctuation">,</span>
   <span class="token number">0x0A</span><span class="token punctuation">:</span><span class="token string">"gG"</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">:</span><span class="token string">"hH"</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">:</span><span class="token string">"iI"</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">:</span><span class="token string">"jJ"</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">:</span><span class="token string">"kK"</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">:</span><span class="token string">"lL"</span><span class="token punctuation">,</span>
   <span class="token number">0x10</span><span class="token punctuation">:</span><span class="token string">"mM"</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">:</span><span class="token string">"nN"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">:</span><span class="token string">"oO"</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">:</span><span class="token string">"pP"</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">:</span><span class="token string">"qQ"</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">:</span><span class="token string">"rR"</span><span class="token punctuation">,</span>
   <span class="token number">0x16</span><span class="token punctuation">:</span><span class="token string">"sS"</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">:</span><span class="token string">"tT"</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">:</span><span class="token string">"uU"</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">:</span><span class="token string">"vV"</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">:</span><span class="token string">"wW"</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">:</span><span class="token string">"xX"</span><span class="token punctuation">,</span>
   <span class="token number">0x1C</span><span class="token punctuation">:</span><span class="token string">"yY"</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">:</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">:</span><span class="token string">"1!"</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">:</span><span class="token string">"2@"</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">:</span><span class="token string">"3#"</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">:</span><span class="token string">"4$"</span><span class="token punctuation">,</span>
   <span class="token number">0x22</span><span class="token punctuation">:</span><span class="token string">"5%"</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">:</span><span class="token string">"6^"</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">:</span><span class="token string">"7&amp;"</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">:</span><span class="token string">"8*"</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">:</span><span class="token string">"9("</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">:</span><span class="token string">"0)"</span><span class="token punctuation">,</span>
   <span class="token number">0x2C</span><span class="token punctuation">:</span><span class="token string">"  "</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">:</span><span class="token string">"-_"</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">:</span><span class="token string">"=+"</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">:</span><span class="token string">"[{"</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">:</span><span class="token string">"]}"</span><span class="token punctuation">,</span>  <span class="token number">0x32</span><span class="token punctuation">:</span><span class="token string">"#~"</span><span class="token punctuation">,</span>
   <span class="token number">0x33</span><span class="token punctuation">:</span><span class="token string">";:"</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">:</span><span class="token string">"'\""</span><span class="token punctuation">,</span>  <span class="token number">0x36</span><span class="token punctuation">:</span><span class="token string">",&lt;"</span><span class="token punctuation">,</span>  <span class="token number">0x37</span><span class="token punctuation">:</span><span class="token string">".>"</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">:</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">:</span><span class="token string">"&lt;"</span>
   <span class="token punctuation">}</span>
l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>

pos <span class="token operator">=</span> <span class="token number">0</span>

os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'tshark -r location.pcap -T fields -e usb.capdata > d.txt'</span><span class="token punctuation">)</span>

f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"d.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>

a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  d<span class="token operator">=</span>str<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  d<span class="token operator">=</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"00"</span> <span class="token operator">or</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"02"</span><span class="token punctuation">)</span> <span class="token operator">and</span> d<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>

a<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

b<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'k1'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>write<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
b<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> x <span class="token keyword">in</span> open<span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   c <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> 
   <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
       <span class="token keyword">continue</span>
   <span class="token comment" spellcheck="true"># newline or down arrow - move down</span>
   <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0x51</span> <span class="token operator">or</span> c <span class="token operator">==</span> <span class="token number">0x28</span><span class="token punctuation">:</span>
       pos <span class="token operator">+=</span> <span class="token number">1</span>
       <span class="token keyword">continue</span>
   <span class="token comment" spellcheck="true"># up arrow - move up</span>
   <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0x52</span><span class="token punctuation">:</span>
       pos <span class="token operator">-=</span> <span class="token number">1</span>
       <span class="token keyword">continue</span>
   <span class="token comment" spellcheck="true"># select the character based on the Shift key</span>
   <span class="token keyword">if</span> int<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
       l<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> usb_codes<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
   <span class="token keyword">else</span><span class="token punctuation">:</span>
       l<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> usb_codes<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">print</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre>
<p>After running the above code for USB keyboard hid keys, got an output as some random string,</p>
<p><img src="/images/cyberwar/random_string.png" alt="Random String"></p>
<p>The random string is : <strong>synt{jne_arire_punatrf}</strong></p>
<p>I understood that random string was a <strong>Caesar Cipher</strong>. So I re-modified the above code such a way that we get the deciphered flag as we can see that the difference between <strong>s</strong> and <strong>f</strong> is <strong>13</strong>, so I remodified like that. Modified code is,</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
usb_codes <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token number">0x04</span><span class="token punctuation">:</span><span class="token string">"aA"</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">:</span><span class="token string">"bB"</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">:</span><span class="token string">"cC"</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">:</span><span class="token string">"dD"</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">:</span><span class="token string">"eE"</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">:</span><span class="token string">"fF"</span><span class="token punctuation">,</span>
   <span class="token number">0x0A</span><span class="token punctuation">:</span><span class="token string">"gG"</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">:</span><span class="token string">"hH"</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">:</span><span class="token string">"iI"</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">:</span><span class="token string">"jJ"</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">:</span><span class="token string">"kK"</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">:</span><span class="token string">"lL"</span><span class="token punctuation">,</span>
   <span class="token number">0x10</span><span class="token punctuation">:</span><span class="token string">"mM"</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">:</span><span class="token string">"nN"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">:</span><span class="token string">"oO"</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">:</span><span class="token string">"pP"</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">:</span><span class="token string">"qQ"</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">:</span><span class="token string">"rR"</span><span class="token punctuation">,</span>
   <span class="token number">0x16</span><span class="token punctuation">:</span><span class="token string">"sS"</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">:</span><span class="token string">"tT"</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">:</span><span class="token string">"uU"</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">:</span><span class="token string">"vV"</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">:</span><span class="token string">"wW"</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">:</span><span class="token string">"xX"</span><span class="token punctuation">,</span>
   <span class="token number">0x1C</span><span class="token punctuation">:</span><span class="token string">"yY"</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">:</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">:</span><span class="token string">"1!"</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">:</span><span class="token string">"2@"</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">:</span><span class="token string">"3#"</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">:</span><span class="token string">"4$"</span><span class="token punctuation">,</span>
   <span class="token number">0x22</span><span class="token punctuation">:</span><span class="token string">"5%"</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">:</span><span class="token string">"6^"</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">:</span><span class="token string">"7&amp;"</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">:</span><span class="token string">"8*"</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">:</span><span class="token string">"9("</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">:</span><span class="token string">"0)"</span><span class="token punctuation">,</span>
   <span class="token number">0x2C</span><span class="token punctuation">:</span><span class="token string">"  "</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">:</span><span class="token string">"-_"</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">:</span><span class="token string">"=+"</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">:</span><span class="token string">"[{"</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">:</span><span class="token string">"]}"</span><span class="token punctuation">,</span>  <span class="token number">0x32</span><span class="token punctuation">:</span><span class="token string">"#~"</span><span class="token punctuation">,</span>
   <span class="token number">0x33</span><span class="token punctuation">:</span><span class="token string">";:"</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">:</span><span class="token string">"'\""</span><span class="token punctuation">,</span>  <span class="token number">0x36</span><span class="token punctuation">:</span><span class="token string">",&lt;"</span><span class="token punctuation">,</span>  <span class="token number">0x37</span><span class="token punctuation">:</span><span class="token string">".>"</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">:</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">:</span><span class="token string">"&lt;"</span>
   <span class="token punctuation">}</span>
l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>

pos <span class="token operator">=</span> <span class="token number">0</span>

os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'tshark -r location.pcap -T fields -e usb.capdata > d.txt'</span><span class="token punctuation">)</span>

f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"d.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>

a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  d<span class="token operator">=</span>str<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  d<span class="token operator">=</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"00"</span> <span class="token operator">or</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"02"</span><span class="token punctuation">)</span> <span class="token operator">and</span> d<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>

a<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

b<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'k1'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>write<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
b<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> x <span class="token keyword">in</span> open<span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   c <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>

   <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
       <span class="token keyword">continue</span>
   <span class="token comment" spellcheck="true"># newline or down arrow - move down</span>
   <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0x51</span> <span class="token operator">or</span> c <span class="token operator">==</span> <span class="token number">0x28</span><span class="token punctuation">:</span>
       pos <span class="token operator">+=</span> <span class="token number">1</span>
       <span class="token keyword">continue</span>
   <span class="token comment" spellcheck="true"># up arrow - move up</span>
   <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0x52</span><span class="token punctuation">:</span>
       pos <span class="token operator">-=</span> <span class="token number">1</span>
       <span class="token keyword">continue</span>
   <span class="token comment" spellcheck="true"># select the character based on the Shift key</span>
   <span class="token keyword">if</span> int<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
       l<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> usb_codes<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
   <span class="token keyword">else</span><span class="token punctuation">:</span>
       l<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> usb_codes<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">print</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

new_str <span class="token operator">=</span> <span class="token string">''</span>
temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> letter <span class="token keyword">in</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> ord<span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">and</span> ord<span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">:</span>
        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">97</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">else</span><span class="token punctuation">:</span>
        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>letter<span class="token punctuation">)</span>
new_str <span class="token operator">=</span> new_str<span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>

<span class="token keyword">print</span> new_str</code></pre>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p><img src="/images/cyberwar/flag.png" alt="flag"></p>
<p>Flag: <strong>flag{war_never_changes}</strong></p>
<p>If you liked my solution, please do share it. I’m available on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Writeups</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Memlabs Lab - 2 Writeup</title>
    <url>/2020/06/01/Memlabs-Lab-2-Writeup/</url>
    <content><![CDATA[<p>We are provided with a <strong>Windows 7</strong> memory dump. Let’s begin our initial analysis.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>Let’s check what all processes are running.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab2.raw --profile<span class="token operator">=</span>Win7SP1x64 pslist</code></pre>
<p><img src="/images/Memlabs-Lab-2/pslist1.png" alt="pslist output"><br><img src="/images/Memlabs-Lab-2/pslist2.png" alt="pslist output"></p>
<p>As we can see <code>chrome</code>, <code>keepass</code> are active running processes, lets check what’s there in them.</p>
<h2 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h2><p>Let us check the environmental variables. We can check it using <code>envars</code> plugin.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugin<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab2.raw --profile<span class="token operator">=</span>Win7SP1x64 envars</code></pre>
<p><img src="/images/Memlabs-Lab-2/envars.png" alt="envars output"></p>
<p>As we can see that there is a base64 string, we can decode it. After decoding it we got the first flag: <strong>flag{w3lc0m3_T0_$T4g3_!_Of_L4B_2}</strong></p>
<h2 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h2><p>As Keepass is running, let us see whats there in it.</p>
<p>Keepass is used to store the passwords in a kdbx password database. So lets find the <strong>kdbx</strong> file.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugin<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab2.raw --profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span> <span class="token function">grep</span> kdbx</code></pre>
<p><img src="/images/Memlabs-Lab-2/kdbx_filescan.png" alt="filescan output"></p>
<p>We found the kdbx file, so we can dump it.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugin<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab2.raw --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000003fb112a0 -D <span class="token keyword">.</span></code></pre>
<p><img src="/images/Memlabs-Lab-2/kdbx_dumpfiles.png" alt="dump kdbx"></p>
<p>As Keepass is used for storing password and it should not be revealed easy so it will be protected with a Master password. So in this case also we are asked for Master password. So I thought of searching for all files if there is anything we can find something related to password.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugin<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab2.raw --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000003fce1c70 -D <span class="token keyword">.</span></code></pre>
<p><img src="/images/Memlabs-Lab-2/pass_dumpfiles.png" alt="dump password"></p>
<p>As we can see the password in the bottom, after using it and opening the Keepass file, I didn’t find anything useful. By checking the <strong>Recycle Bin</strong> one can see the <strong>username: Flag</strong>. So after checking the record, we can find the flag stored as password.</p>
<p><img src="/images/Memlabs-Lab-2/kdbx_password.png" alt="Password"></p>
<p>Flag: <strong>flag{w0w_th1s_1s_Th3_SeC0nD_ST4g3_!!}</strong></p>
<h2 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag 3"></a>Flag 3</h2><p>As chrome is running, let’s see the history of chrome.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility --plugin<span class="token operator">=</span>/home/g4rud4/Downloads/Tools/volatility-plugins -f MemoryDump_Lab2.raw --profile<span class="token operator">=</span>Win7SP1x64 chromehistory</code></pre>
<p><img src="/images/Memlabs-Lab-2/chromehistory.png" alt="chrome history"></p>
<p>As we can see that there is a <a href="https://mega.nz/folder/TrgSQQTS#H0ZrUzF0B-ZKNM3y9E76lg" target="_blank" rel="noopener">mega link</a>. After opening the mega link, we got zip file.<br>However, the archive is password protected. Also, brute-forcing for the password is not at all intended. So let us use <code>unzip</code> and check what we get.</p>
<p><img src="/images/Memlabs-Lab-2/unzip.png" alt="unzip output"></p>
<p>We can see a comment, “<strong>Password is SHA1(stage-3-FLAG) from Lab-1. Password is in lowercase</strong>“.<br>As we have solved Stage 3 of Lab - 1. After using it, we got the the 3rd flag.</p>
<p><img src="/images/Memlabs-Lab-2/Important.png" alt="Flag 3"></p>
<p>That’s how you finish this <strong>MemLabs, Lab – 2</strong>.</p>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
]]></content>
      <categories>
        <category>Memlabs</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
        <tag>Memlabs</tag>
      </tags>
  </entry>
  <entry>
    <title>Memlabs Lab - 3 writeup</title>
    <url>/2020/06/01/Memlabs-Lab-3-writeup/</url>
    <content><![CDATA[<p>We are provided with a <strong>Windows 7</strong> memory dump. Let’s begin our initial analysis.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>Let’s check what all processes are running.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab3.raw --profile<span class="token operator">=</span>Win7SP1x86 pslist</code></pre>
<p><img src="/images/Memlabs-Lab-3/pslist1.png" alt="pslist output"><br><img src="/images/Memlabs-Lab-3/pslist2.png" alt="pslist output"></p>
<p>As we can see only notepad is active, so let us try using <code>cmdline</code> plugin to check the process command line arguments.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab3.raw --profile<span class="token operator">=</span>Win7SP1x86 cmdline</code></pre>
<p>Going through the cmdline plugin output. In the bottom we can see that,</p>
<pre><code>notepad.exe pid:   3736
Command line : &quot;C:\Windows\system32\NOTEPAD.EXE&quot; C:\Users\hello\Desktop\evilscript.py
************************************************************************
notepad.exe pid:   3432
Command line : &quot;C:\Windows\system32\NOTEPAD.EXE&quot; C:\Users\hello\Desktop\vip.txt</code></pre><p>using notepad the user <code>hello</code> accessed <code>evilscript.py</code> and <code>vip.txt</code>. Let us check if those files are still there in the memory.</p>
<pre class=" language-bash"><code class="language-bash">$ volatility -f MemoryDump_Lab3.raw --profile<span class="token operator">=</span>Win7SP1x86 filescan <span class="token operator">|</span> <span class="token function">grep</span> Desktop</code></pre>
<p><img src="/images/Memlabs-Lab-3/filescan.png" alt="filescan output"></p>
<p>As we can see that, those are still present in the memory so we can dump them. And we can see that there is an another file named <code>suspision1.jpeg</code> is also located on same folder. So let’s dump that too</p>
<p><img src="/images/Memlabs-Lab-3/dumpfiles.png" alt="dumpfiles"></p>
<p>So lets’s check what’s there in the python file.</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys
<span class="token keyword">import</span> string

<span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">)</span>
    <span class="token keyword">return</span> a

<span class="token keyword">def</span> <span class="token function">encoder</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\hello\\Desktop\\vip.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>
    arr <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    arr <span class="token operator">=</span> encoder<span class="token punctuation">(</span>xor<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>As we can see the script is xoring a string with 3 and then encoding it to baste64 and writing it to vip.txt. So by doing the same exact thing in reverse way we can get the original string.</p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>I have done this in ipython:</p>
<pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'am1gd2V4M20wXGs3b2U='</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span>
q<span class="token operator">=</span><span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
    q<span class="token operator">+=</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre>
<p>This gave the output as the first half of the flag: <strong>inctf{0n3_h4lf</strong>.</p>
<p>As we have got a jpg file,</p>
<p><img src="/images/Memlabs-Lab-3/suspision1.jpeg" alt="jpg file"></p>
<p>So lets try steghide with out a password and using the first half of the flag as the password.</p>
<p><img src="/images/Memlabs-Lab-3/steghide.png" alt="steghide output"></p>
<p>After using the first half of the flag as the password, we got the result <code>secret text</code>. Opening it got the second part of the flag: <strong>_1s_n0t_3n0ugh}</strong></p>
<p>Flag: <strong>inctf{0n3_h4lf_1s_n0t_3n0ugh}</strong></p>
<p>That’s how you finish this <strong>MemLabs, Lab – 3</strong>.</p>
<blockquote>
<p>If you like my solution, please do share it. I’m availabe on Twitter: <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">@NihithNihi</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Memlabs</category>
      </categories>
      <tags>
        <tag>Volatility</tag>
        <tag>Memory</tag>
        <tag>Memlabs</tag>
      </tags>
  </entry>
  <entry>
    <title>USB 2 - 2020 Defenit CTF</title>
    <url>/2020/06/07/Defenit20-USB2/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Digging into windows registry to find process run counts.</li>
<li>Extracting and parsing AmCache to find the hash of process images</li>
</ul>
<a id="more"></a>

<p><strong>Challenge points</strong>: 766<br><strong>No. of solves</strong>: 6<br><strong>Solved by</strong>: <a href="https://twitter.com/_abhiramkumar" target="_blank" rel="noopener">stuxn3t</a> &amp; <a href="https://twitter.com/NihithNihi" target="_blank" rel="noopener">g4rud4</a></p>
<h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><p><img src="/images/Defenit20-USB2/description.png" alt="Challenge-Description"></p>
<p>The challenge file can be downloaded from <a href="https://drive.google.com/drive/folders/1xWIDVxxr6gGL6w-7K2KNwDmanADfKMDW" target="_blank" rel="noopener">Google Drive</a>.</p>
<h2 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h2><p>We are provided with the file <code>usb.ad1</code>. From the extension, It was quite clear that the evidence was acquired via Access Data’s FTK Imager. So let us go ahead and load the file in FTK Imager.</p>
<p>We observe that only very few directories are present and our objective is to find the answer to the following questions so that we can combine them to get the flag. So let us dig in.</p>
<h2 id="Answering-Question-1"><a href="#Answering-Question-1" class="headerlink" title="Answering Question 1"></a>Answering Question 1</h2><pre class=" language-text"><code class="language-text">Question 1: Among the exe files, there are several files executed on the same USB. Let's call the second executed file 'A'. What is the name of 'A'?</code></pre>
<p>So we have to find what processes were run when the USB was loaded. Well, we normally know that Sysmon records the events of process creation. However, Sysmon is not enabled in any system by default and when we analyzed the event logs, we did not find any trace of Sysmon as well. So this approach wouldn’t work.</p>
<p>However, we found the presence of <code>NTUSER.DAT</code> in the system.</p>
<p><img src="/images/Defenit20-USB2/ntuser.png" alt="NTUSER"></p>
<p><strong>Path</strong>: <code>[root]/Users/james</code></p>
<p>There are a lot of tools to view registry files. Here I am using <strong>Registry Explorer</strong> from Eric Zimmerman.</p>
<pre class=" language-text"><code class="language-text">Path: Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count</code></pre>
<p>This sub-key gives us the list of processes that were run with timestamps and also how many times they were run.</p>
<p><img src="/images/Defenit20-USB2/userassist.png" alt="UserAssist"></p>
<p>To know which process was run on the USB, we first have to know when the USB was loaded. For this, we use the <code>SYSTEM</code> registry to determine the <code>Last Installed</code> time of the USB on the system.</p>
<pre class=" language-text"><code class="language-text">Path: ControlSet001\Enum\USBSTOR\Disk&Ven_SanDisk&Prod_Ultra&Rev_1.00\4C531001461206123040&0\Properties\{83da6326-97a6-4088-9453-a1923f573b29}\0066</code></pre>
<p>We can see the last write time as <code>2020-05-17</code>. So from this small detail, we can easily eliminate a lot of processes. However, we also found out that the USB was plugged-in/used ~ 19:00 Hrs as well. We found this from the <code>.lnk</code> files created in the system.</p>
<p><img src="/images/Defenit20-USB2/recentapps.png" alt="RecentApps"></p>
<p><code>.lnk</code> files are created whenever a file/folder is opened. In this case, we find a <strong>USB (E).lnk</strong> created on <code>2020-05-17 19:11:36 Hrs</code></p>
<p>So we can now even accurately predict the process. We only want to locate the 2 processes closest to this timestamp and the second one in that is the answer. Observing closely, we see 2 processes pretty near the above timestamp.</p>
<table>
<thead>
<tr>
<th align="center">Program Name</th>
<th align="center">Run Counter</th>
<th align="center">Focus Count</th>
<th align="center">Focus Time</th>
<th align="center">Last Executed</th>
</tr>
</thead>
<tbody><tr>
<td align="center">E:\svchost.exe</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0d, 0h, 00m, 00s</td>
<td align="center">2020-05-17 19:11:00</td>
</tr>
<tr>
<td align="center">Microsoft.Windows.Explorer</td>
<td align="center">40</td>
<td align="center">109</td>
<td align="center">0d, 0h, 53m, 03s</td>
<td align="center">2020-05-17 19:10:13</td>
</tr>
</tbody></table>
<p>Judging by the timestamp and my knowledge on the services given by processes, I chose <code>svchost.exe</code></p>
<h2 id="Answering-Question-2"><a href="#Answering-Question-2" class="headerlink" title="Answering Question 2"></a>Answering Question 2</h2><pre><code>Question 2: How many times has &#39;A&#39; been executed?</code></pre><p>Since we have determined the which process is ‘A’ (svchost.exe), from the above table, we can get the answer to this question from the value specified in the <code>Run Counter</code> column, we can see the svchost.exe was run <code>1</code> time.</p>
<h2 id="Answering-Question-3"><a href="#Answering-Question-3" class="headerlink" title="Answering Question 3"></a>Answering Question 3</h2><pre><code>Question 3: What is the sha-1 hash value of &#39;A&#39;?</code></pre><p>We can get the process details from the <code>Amcache.hve</code> file. Luckily, this file was present in the system.</p>
<p><strong>Path</strong>: <code>[root]/Windows/appcompat/Programs</code></p>
<p>We can use Eric Zimmerman’s tool <a href="https://f001.backblazeb2.com/file/EricZimmermanTools/AmcacheParser.zip" target="_blank" rel="noopener">AmcacheParser</a> to parse the files.</p>
<p>We extract the following files</p>
<ul>
<li>Amcache.hve</li>
<li>Amcache.hve.LOG1</li>
<li>Amcache.hve.LOG2</li>
</ul>
<p>Next, we use PowerShell to properly parse the files into <code>.CSV</code> format.</p>
<p><img src="/images/Defenit20-USB2/amcache.png" alt="amcache"></p>
<p>The excel file required in this case is the <code>Amcache_UnassociatedFileEntries.csv</code>.</p>
<p><img src="/images/Defenit20-USB2/excel.png" alt="excel"></p>
<p>So we now have the SHA-1 hash of the file as: <code>d68960b8ecb374dd98ef6a33fed45dddd9796402</code></p>
<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>Concatenating all the 3 answers gives us the flag.</p>
<p><strong>FLAG</strong>: <code>Defenit{svchost.exe_1_d68960b8ecb374dd98ef6a33fed45dddd9796402}</code></p>
]]></content>
      <categories>
        <category>Windows Registry Analysis</category>
      </categories>
      <tags>
        <tag>Amcache</tag>
        <tag>Registry Analysis</tag>
      </tags>
  </entry>
</search>
